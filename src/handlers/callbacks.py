from aiogram.types import CallbackQuery
from aiogram import F
from aiogram import Router
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from src.services.sql import DataBase
from src.config import database_path
from src.keyboards import keyboards
from src.states.user_states import (EditServiceStates, EditName, EditPeriod, DeleteAccount, EditAccountPassword,
                                    EditAccountPasswordReq)

from datetime import date

from Texts.texts import MESSAGES

db = DataBase(database_path)
router = Router()


@router.callback_query(F.data == 'close_profile_menu')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
async def close_profile_menu(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå–ó–∞–∫—Ä—ã—Ç–æ‚ùå",
                                     reply_markup=None)
    await asyncio.sleep(3)
    await callback.message.delete()


@router.callback_query(F.data == 'edit_profile')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
async def edit_menu(callback: CallbackQuery):
    user = await db.get_value('id', callback.from_user.id)
    await callback.message.edit_text(
        f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(user[4].split("/"))}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
        f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
        f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
        reply_markup=keyboards.edit_account_keyboard(user))


@router.callback_query(F.data == 'edit_alerts')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
async def edit_alerts(callback: CallbackQuery):
    user = await db.get_value('id', callback.from_user.id)
    if user[5] == 1:
        await db.update_alerts(callback.from_user.id, 0)
    else:
        await db.update_alerts(callback.from_user.id, 1)
    user = await db.get_value('id', callback.from_user.id)
    x = user[4].split("/")
    await callback.message.edit_text(
        f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
        f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
        f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
        reply_markup=keyboards.edit_account_keyboard(user))


@router.callback_query(F.data == 'cancel')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∫–Ω–æ–∞–∫—É –û—Ç–µ–º–Ω–∞(–í–æ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö)
async def cancel(callback: CallbackQuery, state: FSMContext):
    m = await callback.message.edit_text("‚ùå–û—Ç–º–µ–Ω–∞‚ùå")
    await asyncio.sleep(3)
    await m.delete()
    await state.clear()


@router.callback_query(F.data == 'add_service')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
async def add_service(callback: CallbackQuery, state: FSMContext):
    text = callback.message.text.split('\n')
    last_data = await db.get_value('id', callback.from_user.id)
    service = text[0].split(': ')[1]
    pasword = text[1].split(': ')[1]
    current_date = date.today()
    data = f'{service}:{pasword}:{current_date}'
    if last_data[4] == '':
        await db.update_passwords(callback.from_user.id, '/'.join([data]))
    else:
        await db.update_passwords(callback.from_user.id, '/'.join([last_data[4], data]))
    await callback.message.edit_text('–°–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=None)
    await callback.message.answer('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏:', reply_markup=keyboards.pwd_menage_keyboard())
    await state.clear()


@router.callback_query(F.data == 'delete_service')  # –†–æ—É—Ç–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
async def delete_service(callback: CallbackQuery, state: FSMContext):
    data_db = await db.get_value('id', callback.from_user.id)
    data_db = data_db[4].split('/')
    data_tg = await state.get_data()
    service = data_tg['service_name']
    for i in data_db:
        if service == i.split(':')[0]:
            data_db.remove(i)
            await db.update_passwords(callback.from_user.id, "/".join(data_db))
            break
    await callback.message.edit_text('–°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω!', reply_markup=None)
    await callback.message.answer('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏:', reply_markup=keyboards.pwd_menage_keyboard())


@router.callback_query(F.data == 'edit_passwd_req')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
async def edit_alerts(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=None)
    await state.set_state(EditAccountPasswordReq.password)


@router.callback_query(F.data == 'edit_service_password')
async def del_service(callback: CallbackQuery):
    if await db.user_in_base(callback.from_user.id):
        data = callback.message.text.split('\n')[2:]
        s = []
        for i in data:
            s.append(i)
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_edit_keyboard(s))
    else:
        await callback.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.callback_query(F.data == 'edit_service')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def edit_service(callback: CallbackQuery, state: FSMContext):
    data_db = await db.get_value('id', callback.from_user.id)
    data_db = data_db[4].split('/')
    data_tg = await state.get_data()
    service = data_tg['service_name']
    for i in data_db:
        if service == i.split(':')[0]:
            data = f'{service}:{data_tg["service_password"]}:{date.today()}'
            data_db.remove(i)
            data_db.append(data)
            await db.update_passwords(callback.from_user.id, "/".join(data_db))
            break
    await callback.message.edit_text('–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!', reply_markup=None)
    await callback.message.answer('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏:', reply_markup=keyboards.pwd_menage_keyboard())
    await state.clear()


@router.callback_query(F.data == 'edit_period')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def edit_name(callback: CallbackQuery, state: FSMContext):
    last_period = await db.get_value('id', callback.from_user.id)
    await callback.message.edit_text(f'–¢–µ–∫—É—â–∞—è –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å: {last_period[3]} –¥.\n'
                                     f'–ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—É—é(–≤ –¥–Ω—è—Ö):')
    await state.set_state(EditPeriod.new_period)


@router.callback_query(F.data == 'edit_name')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
    await state.set_state(EditName.name)


@router.callback_query(F.data == 'edit_name_final')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def edit_name_final(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    await db.update_name(callback.from_user.id, data['user_name'])
    user = await db.get_value('id', callback.from_user.id)
    await state.clear()
    x = user[4].split("/")
    await callback.message.answer(
        f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
        f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
        f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
        reply_markup=keyboards.edit_account_keyboard(user))


@router.callback_query(F.data == 'del_account')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def del_account(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', reply_markup=None)
    await state.set_state(DeleteAccount.password)


@router.callback_query(F.data == 'edit_passwd')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def edit_account_password(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:', reply_markup=None)
    await state.set_state(EditAccountPassword.password)


@router.callback_query(F.data == 'del_account_final')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def del_account_final(callback: CallbackQuery, state: FSMContext):
    await db.delete('id', callback.from_user.id)
    await callback.message.edit_text('–í–∞—à –∞–∫–∫—É–Ω—Ç —É–¥–∞–ª–µ–Ω', reply_markup=None)
    await state.clear()


@router.callback_query(F.data == 'edit_ac_true')  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def del_account_final(callback: CallbackQuery, state: FSMContext):
    pwd = await state.get_data()
    await db.update_password(callback.from_user.id, pwd['new_account_password'])
    user = await db.get_value('id', callback.from_user.id)
    x = user[4].split("/")
    await callback.message.edit_text('‚úÖ–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω‚úÖ')
    await asyncio.sleep(1)
    await callback.message.edit_text(
        f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
        f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
        f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
        reply_markup=keyboards.edit_account_keyboard(user))
    await state.clear()


@router.callback_query()  # –†–æ—É—Ç–µ—Ä –Ω–∞ –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–±—ç–∫–∏
async def other(callback: CallbackQuery, state: FSMContext):
    if 'service' == callback.data.split(':')[0]:
        data = await db.get_value('id', callback.from_user.id)
        service = callback.data.split(':')[1]
        password = ''
        for i in data[4].split('/'):
            if service == i.split(':')[0]:
                password = i.split(':')[1]
                break
        for sec in range(15, 0, -1):
            await callback.message.edit_text(f'–ü–∞—Ä–æ–ª—å: <tg-spoiler>{password}</tg-spoiler>\n–ò—Å—á–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ {sec}',
                                             parse_mode=ParseMode.HTML,
                                             reply_markup=None)
            await asyncio.sleep(1)
        await callback.message.delete()
        await state.clear()

    elif 'edit' == callback.data.split(':')[0]:
        await state.update_data(service_name=callback.data.split(':')[1], func='edit')
        await callback.message.edit_text(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', reply_markup=None)
        await state.set_state(EditServiceStates.service_name)

    elif 'del' == callback.data.split(':')[0]:
        await state.update_data(service_name=callback.data.split(':')[1], func='delete')
        data = await state.get_data()
        await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {data["service_name"]}',
                                         reply_markup=keyboards.verification_keyboard(data['func']))
