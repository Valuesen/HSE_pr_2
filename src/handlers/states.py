"""
–í –¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import Router

import asyncio

from Texts.texts import MESSAGES
from src.states import user_states
from src.keyboards import keyboards
from src.services.sql import DataBase
from src.config import database_path
from src.states.user_states import EditAccountPasswordReq

from src.services.pwd_cheking import pwd_check
from src.services.spec_func import generate_pwd

router = Router()
database = DataBase(database_path)


@router.message(user_states.UserStates.name)
async def start_pass(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(user_name=message.text)
        await message.answer(f'–ü—Ä–∏—è–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n'
                             f'–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:')
        await state.set_state(user_states.UserStates.password)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º')
        await state.set_state(user_states.UserStates.name)


@router.message(user_states.EditPeriod.new_period)
async def start_pass(message: Message, state: FSMContext):
    try:
        new_period = int(message.text)
        await database.update_peroid(message.from_user.id, new_period)
        user = await database.get_value('id', message.from_user.id)
        m = await message.answer('–ì–æ—Ç–æ–≤–æ üöÄ')
        await asyncio.sleep(2)
        await m.delete()
        await asyncio.sleep(0.2)
        await message.answer(
            f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(user[4].split("/"))}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
            f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
            f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
            reply_markup=keyboards.edit_account_keyboard(user))
        await state.clear()
    except Exception as e:
        print(e)
        await message.answer(f'–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏–≤—Ä—ã!\n–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.EditPeriod.new_period)


@router.message(user_states.UserStates.password)
async def start_sec(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(pwd_message=message.text)
        await message.answer(MESSAGES["final_reg"], reply_markup=keyboards.main_menu_keyboard())
        data = await state.get_data()
        await database.add_user([message.from_user.id, data['user_name'], data["pwd_message"], 60, '', 1, 1])
        await state.clear()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.UserStates.password)


@router.message(user_states.AddServiceStates.service_name)
async def add_serv_name(message: Message, state: FSMContext):
    if message.text:
        if message.text in ['üìã–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤üìã', '‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ', '‚ùå–£–¥–∞–ª–∏—Ç—å‚ùå', '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,\n–Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
            await state.clear()
        else:
            await state.update_data(service_name=message.text.replace(':', '').replace('/', ''))
            await state.set_state(user_states.AddServiceStates.service_login)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n'
                                 '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –∏ :', reply_markup=keyboards.pass_keyboard())

    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.AddServiceStates.service_name)


@router.message(user_states.AddServiceStates.service_login)
async def add_serv_log(message: Message, state: FSMContext):
    if message.text:
        if message.text in ['üìã–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤üìã', '‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ', '‚ùå–£–¥–∞–ª–∏—Ç—å‚ùå', '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,\n–Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
            await state.clear()
        else:
            if message.text == 'üîΩ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîΩ':
                await state.update_data(service_login='–ù–µ —É–∫–∞–∑–∞–Ω')
            else:
                await state.update_data(service_login=message.text.replace(':', '').replace('/', ''))
            await state.set_state(user_states.AddServiceStates.service_password)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ –¥–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É\n'
                                 '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –∏ :', reply_markup=keyboards.random_gen_keyboard())

    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.AddServiceStates.service_login)


@router.message(user_states.AddServiceStates.service_password)
async def add_serv_pwd(message: Message, state: FSMContext):
    if message.text:

        if message.text == 'üé≤–ì–µ–Ω–∏—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—èüé≤':
            await state.update_data(service_password=await generate_pwd())
        else:
            await state.update_data(service_password=message.text.replace(':', '').replace('/', ''))
        data = await state.get_data()

        sec = await pwd_check(data['service_password'])
        await message.answer(f'–°–µ—Ä–≤–∏—Å: {data["service_name"]}\n'
                             f'–õ–æ–≥–∏–Ω: {data["service_login"]}\n'
                             f'–ü–∞—Ä–æ–ª—å: {data["service_password"]}\n'
                             f'–ü–∞—Ä–æ–ª—å {sec}',
                             reply_markup=keyboards.verification_keyboard('add'))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–µ–∫—Å—Ç–æ–º:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.AddServiceStates.service_password)


@router.message(user_states.EditServiceStates.service_password)
async def add_serv_name(message: Message, state: FSMContext):
    if message.text:
        if message.text == 'üé≤–ì–µ–Ω–∏—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—èüé≤':
            await state.update_data(service_password=await generate_pwd())
        else:
            await state.update_data(service_password=message.text.replace(':', '').replace('/', ''))

        data = await state.get_data()
        sec = await pwd_check(data['service_password'])
        await message.answer(f'–°–µ—Ä–≤–∏—Å: {data["service_name"]}\n'
                             f'–ü–∞—Ä–æ–ª—å: {data["service_password"]}\n'
                             f'–ü–∞—Ä–æ–ª—å {sec}',
                             reply_markup=keyboards.verification_keyboard(data["func"]))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–µ–∫—Å—Ç–æ–º:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.EditServiceStates.service_password)


@router.message(user_states.EditServiceStates.service_login)
async def add_serv_name(message: Message, state: FSMContext):
    if message.text:
        if message.text == 'üîΩ–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüîΩ':
            await state.update_data(service_login='–ù–µ —É–∫–∞–∑–∞–Ω')

        else:
            await state.update_data(service_login=message.text.replace(':', '').replace('/', ''))

        data = await state.get_data()
        await message.answer(f'–°–µ—Ä–≤–∏—Å: {data["service_name"]}\n'
                             f'–õ–æ–≥–∏–Ω: {data["service_login"]}',
                             reply_markup=keyboards.verification_keyboard(data["func"]))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–µ–∫—Å—Ç–æ–º:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.EditServiceStates.service_password)


@router.message(user_states.EditName.name)
async def edit_name(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(user_name=message.text)
        await message.answer(f'–ù–æ–≤–æ–µ –∏–º—è: {message.text}',
                             reply_markup=keyboards.verification_keyboard('edit_name'))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º:')
        await state.set_state(user_states.EditName.name)


@router.message(user_states.GetPassword.password)
async def get_pwd(message: Message, state: FSMContext):
    user = await database.get_value('id', message.from_user.id)
    if message.text:
        if message.text == user[2]:
            try:
                lm = await state.get_data()
                lm = lm['last_message']
                await lm.delete()
            except Exception as e:
                print(e)
            data = user[4].split('/')
            s = []
            for i in data:
                s.append(i.split(':')[0])
            if s == ['']:
                await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n–î–æ–±–∞–≤–∏—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ')
            else:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_main_keyboard(s))
            await state.clear()
        else:
            try:
                lm = await state.get_data()
                lm = lm['last_message']
                await lm.delete()
            except Exception as e:
                print(e)
            last_message = await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:',
                                                reply_markup=keyboards.cancel_keyboard())
            await state.update_data(last_message=last_message)
            await state.set_state(user_states.GetPassword.password)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞')
        await state.clear()


@router.message(user_states.DeleteService.password)
async def del_service(message: Message, state: FSMContext):
    user = await database.get_value('id', message.from_user.id)
    if user[6]:
        if message.text:
            if message.text == user[2]:
                try:
                    lm = await state.get_data()
                    lm = lm['last_message']
                    await lm.delete()
                except Exception as e:
                    print(e)
                data = user[4].split('/')
                s = []
                for i in data:
                    s.append(i.split(':')[0])
                if s == ['']:
                    await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n–î–æ–±–∞–≤–∏—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ')
                else:
                    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_main_keyboard(s))
                await state.clear()
            else:
                try:
                    lm = await state.get_data()
                    lm = lm['last_message']
                    await lm.delete()
                except Exception as e:
                    print(e)
                last_message = await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:',
                                                    reply_markup=keyboards.cancel_keyboard())
                await state.update_data(last_message=last_message)
                await state.set_state(user_states.DeleteService.password)
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞\n')
            await state.clear()
    else:
        data = user[4].split('/')
        s = []
        for i in data:
            s.append(i.split(':')[0])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_delete_keyboard(s))
        await state.clear()


@router.message(user_states.DeleteAccount.password)
async def del_account(message: Message, state: FSMContext):
    user = await database.get_value('id', message.from_user.id)
    if message.text:
        if message.text == user[2]:
            await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–ª–µ–Ω–∏—è?',
                                 reply_markup=keyboards.verification_keyboard('del_account'))
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', reply_markup=keyboards.main_menu_keyboard())
        await state.clear()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.DeleteAccount.password)


@router.message(EditAccountPasswordReq.password)  # –†–æ—É—Ç–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
async def edit_account_password_req(message: Message, state: FSMContext):
    user = await database.get_value('id', message.from_user.id)
    if message.text:
        if message.text == user[2]:
            if user[6] == 1:
                await database.update_pwd_req(message.from_user.id, 0)
            else:
                await database.update_pwd_req(message.from_user.id, 1)
            user = await database.get_value('id', message.from_user.id)
            x = user[4].split("/")
            await message.answer(
                f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
                f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
                f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
                reply_markup=keyboards.edit_account_keyboard(user))
        else:
            x = user[4].split("/")
            last = await message.answer('‚ùå–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω‚ùå')
            await asyncio.sleep(1)
            await last.edit_text(
                f'–ò–º—è: {user[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n–ü–µ—Ä–∏–æ–¥: {user[3]} –¥.\n'
                f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª—é—á–µ–Ω—ãüü¢" if user[5] == 1 else "–í—ã–∫–ª—é—á–µ–Ω—ãüî¥"}\n'
                f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è: {"–í–∫–ª—é—á–µ–Ωüü¢" if user[6] == 1 else "–í—ã–∫–ª—é—á–µ–Ωüî¥"}',
                reply_markup=keyboards.edit_account_keyboard(user))
        await state.clear()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', reply_markup=keyboards.cancel_keyboard())
        await state.set_state(EditAccountPasswordReq.password)


@router.message(user_states.EditAccountPassword.password)
async def edit_pwd(message: Message, state: FSMContext):
    user = await database.get_value('id', message.from_user.id)
    if message.text:
        if message.text == user[2]:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:')
            await state.set_state(user_states.EditAccountPassword.new_password)
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', reply_markup=keyboards.main_menu_keyboard())
            await state.clear()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.EditAccountPassword.password)


@router.message(user_states.EditAccountPassword.new_password)
async def edit_pwd(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(new_account_password=message.text)
        await state.set_state(user_states.EditAccountPassword.new_password)
        await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ {message.text}?',
                             reply_markup=keyboards.verification_keyboard('edit_ac_pwd'))
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞,\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:',
                             reply_markup=keyboards.cancel_keyboard())
        await state.set_state(user_states.EditAccountPassword.new_password)
