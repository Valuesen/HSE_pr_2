from datetime import date

from aiogram.types import Message
from aiogram import F
from aiogram import Router
from aiogram.fsm.context import FSMContext

from Texts.texts import MESSAGES

from src.keyboards import keyboards
from src.services.sql import DataBase
from src.config import database_path
from src.states.user_states import AddServiceStates

db = DataBase(database_path)
router = Router()


@router.message(F.text == 'üîß–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏üîß')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üîß–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏üîß
async def pwd_manage(message: Message):
    await message.answer(MESSAGES["pwd_manage"], reply_markup=keyboards.pwd_menage_keyboard())


@router.message(F.text == 'üìã–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤üìã')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üîß–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏üîß
async def pwd_manage(message: Message):
    data = await db.get_value('id', message.from_user.id)
    if data[4] == '':
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n–î–æ–±–∞–≤—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è\n–∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä.‚úÖ')
        return 1
    services = data[4].split('/')
    text = []
    for i in services:
        data_in_serv = i.split(":")
        time = data_in_serv[2].split('-')
        k = str(date(int(time[0]), int(time[1]), int(time[2])) - date.today())
        if k == '0:00:00':
            text.append(f"{data_in_serv[0]}: {data[3]} –¥–Ω–µ–π –¥–æ —Å–º–µ–Ω—ã")
        else:
            k = int(k.split(' ')[0])
            if data[3]+k > 0:
                text.append(f"{data_in_serv[0]}: {data[3]+k} –¥–Ω–µ–π –¥–æ —Å–º–µ–Ω—ã")
            else:
                text.append(f"{data_in_serv[0]}: –ø–æ—Ä–∞ –º–µ–Ω—è—Ç—å")
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:\n" + '\n'.join(text), reply_markup=keyboards.pwd_menage_keyboard())


@router.message(F.text == 'üë§–ê–∫–∫–∞—É–Ω—Çüë§')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üë§–ê–∫–∫–∞—É–Ω—Çüë§
async def account(message: Message):
    if await db.user_in_base(message.from_user.id):
        data = await db.get_value('id', message.from_user.id)
        await message.answer(f'–ò–º—è: {data[1]}\n–°–µ—Ä–≤–∏—Å–æ–≤: {len(data[4].split("/"))}\n–ü–µ—Ä–∏–æ–¥: {data[3]} –¥.',
                             reply_markup=keyboards.account_keyboard())
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == '‚¨Ö–ù–∞–∑–∞–¥')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚¨Ö–ù–∞–∑–∞–¥
async def back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboards.main_menu_keyboard())


@router.message(F.text == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä.‚úÖ')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä.‚úÖ
async def add_service(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞\n(–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ : –∏ /):', reply_markup=None)
    await state.set_state(AddServiceStates.service_name)


@router.message(F.text == '‚ùå–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä.‚ùå')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚ùå–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä.‚ùå
async def del_service(message: Message):
    if await db.user_in_base(message.from_user.id):
        data = await db.get_value('id', message.from_user.id)
        data = data[4].split('/')
        s = []
        for i in data:
            s.append(i.split(':')[0])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_delete_keyboard(s))
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == 'üîß–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—åüîß')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üîß–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—åüîß
async def del_service(message: Message):
    if await db.user_in_base(message.from_user.id):
        data = await db.get_value('id', message.from_user.id)
        data = data[4].split('/')
        s = []
        for i in data:
            s.append(i.split(':')[0])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_edit_keyboard(s))
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == 'üì•–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüì•')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üì•–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—åüì•
async def del_service(message: Message):
    if await db.user_in_base(message.from_user.id):
        data = await db.get_value('id', message.from_user.id)
        data = data[4].split('/')
        s = []
        for i in data:
            s.append(i.split(':')[0])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_keyboard(s))
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
async def other_messages(message: Message):
    await message.answer('–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
