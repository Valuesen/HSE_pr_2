from aiogram.types import Message
from aiogram import F
from aiogram import Router
from aiogram.fsm.context import FSMContext

from Texts.texts import MESSAGES

from src.keyboards import keyboards
from src.services.sql import DataBase
from src.config import database_path
from src.states.user_states import AddServiceStates, DeleteService, GetPassword

db = DataBase(database_path)
router = Router()


@router.message(F.text == 'üîë–•—Ä–∞–Ω–∏–ª–∏—â–µüîë')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üîß–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏üîß
async def pwd_manage(message: Message):
    await message.answer(MESSAGES["pwd_manage"], reply_markup=keyboards.pwd_menage_keyboard())


@router.message(F.text == 'üìã–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤üìã')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üîß–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏üîß
async def pwd_manage(message: Message, state: FSMContext):
    data = await db.get_value('id', message.from_user.id)
    if await db.user_in_base(message.from_user.id):
        if data[6] == 1:
            await state.set_state(GetPassword.password)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –õ–ö:')
        else:
            data = data[4].split('/')
            s = []
            for i in data:
                s.append(i.split(':')[0])
            if s == ['']:
                await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n–î–æ–±–∞–≤–∏—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ')
            else:
                await message.answer('–°–µ—Ä–≤–∏—Å—ã:', reply_markup=keyboards.services_main_keyboard(s))
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É üë§–ê–∫–∫–∞—É–Ω—Çüë§
async def account(message: Message):
    if await db.user_in_base(message.from_user.id):
        user = await db.get_value('id', message.from_user.id)
        x = user[4].split("/")
        await message.answer(f'–ò–º—è: {user[1]}\n'
                             f'–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –õ–ö: {"–í–∫–ª.üü¢" if user[6] == 1 else "–í—ã–∫–ª.üî¥"}\n'
                             f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {"–í–∫–ª.üü¢" if user[5] == 1 else "–í—ã–∫–ª.üî¥"}\n'
                             f'–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è: –∫–∞–∂–¥—ã–µ {user[3]} –¥–Ω.\n'
                             f'–°–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {0 if x == [""] else len(x)}\n',

                             reply_markup=keyboards.account_keyboard())
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚¨Ö–ù–∞–∑–∞–¥
async def back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=keyboards.main_menu_keyboard())


@router.message(F.text == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä.‚úÖ
async def add_service(message: Message, state: FSMContext):
    if await db.user_in_base(message.from_user.id):
        await state.set_state(AddServiceStates.service_name)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞,\n–ø–∞—Ä–æ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: mail.ru\n'
                             '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã / –∏ :', reply_markup=None)
    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.text == '‚ùå–£–¥–∞–ª–∏—Ç—å‚ùå')  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚ùå–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä.‚ùå
async def del_service(message: Message, state: FSMContext):
    if await db.user_in_base(message.from_user.id):
        user = await db.get_value('id', message.from_user.id)
        if user[6]:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –õ–ö:')
            await state.set_state(DeleteService.password)
        else:
            data = user[4].split('/')
            s = []
            for i in data:
                s.append(i.split(':')[0])
            if s == ['']:
                await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n–î–æ–±–∞–≤–∏—Ç–µ –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É ‚úÖ–î–æ–±–∞–≤–∏—Ç—å‚úÖ')
            else:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=keyboards.services_delete_keyboard(s))

    else:
        await message.answer(MESSAGES['user_not_in_base'], reply_markup=keyboards.start_keyboard())


@router.message(F.sticker)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
async def other_messages(message: Message):
    await message.bot.send_sticker(message.chat.id,
                                   message.sticker.file_id)


@router.message()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
async def other_messages(message: Message):
    await message.answer('–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
